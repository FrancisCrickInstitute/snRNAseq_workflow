// resume = true

conda.enabled = true

// load base.config by default for all pipelines
includeConfig 'config/base.config'

// singularity
singularity {
  cacheDir = "$baseDir/work/singularity/"
}

// params
params {
  help = false
  genome = "hg38"
  input {
    manifest_file = false
    sample_metadata_file = false
    run_each = true
    run_all = true
  }
  output {
    dir = "$baseDir/output/"
  }
  filter {
    do_filtering = true
    doublets = true
    n_nuclei_per_gene {
      min = 5
    }
    nCount_RNA {
      max = 10000
      min = 300
    }
    nFeature_RNA {
      max = 10000
      min = 200
    }
    percent_mito {
      max = 10
      min = 0
    }
  }
  n_dims = false
  vars_to_regress = ["percent_mito", "nCount_RNA"]
  annotating {
    markers_file = false
    annotations_file = false
  }
  infercnv {
    reference_celltypes = false
    gene_order_file = false
  }
  
  // defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
